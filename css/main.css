/* COMMON */
.body__container {
  font-family: 'Roboto', sans-serif;
  font-size: 16px;
  font-weight: 400;
  color: #333;
}
a {
  text-decoration: none; /* 밑줄 사용하지 않겠다 */
}

/* BTN */
.btn {
  height: 34px;
  background: #eee linear-gradient(to bottom, #fcfcfc, #eee);
  border: 1px solid #d5d5d5;
  border-radius: 4px;
  display: inline-flex;
  align-items: center;
  padding: 0 12px;
  font-size: 14px;
  font-weight: 500;
  line-height: 1.5;
  cursor: pointer;
  /* padding 이나 boarder 가 들어갔을 때 요소가 확 커지는 것을 방지해주는 것 */
  box-sizing: border-box;
  /* 부모 요소의 position 값이 없으면 relative 를 설정한다 */
  position: relative;
  color: #333;
}

/* 버튼 위에 마우스 올라갔을 때 스타일*/
/* 살짝 어둡게 설정 */
.btn:hover::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background:  rgba(0,0,0,0.07);
}

/* btn--primary 버튼 정의 */
.btn.btn--primary {
  border: 1px solid #65b836;
  color: #fff;
  background: #55a532 linear-gradient(#91dd70, #55ae2e);
}

/* INPUT TEXT */
.input--text {
  height: 34px;
  padding: 0 10px; /* 위아래 0, 좌우 10px*/
  border: 1px solid #ddd;
  border-radius: 5px;
  box-sizing: border-box;
  outline: none; /* 입력창에 포커스가 왔을 때 테두리 색 바뀌는 처리 -> 안 하겠다. */
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.075); /* inset=그림자 box안쪽으로 넣기 x=0, y=1px, 블러=2px*/
  font-size: 16px;
}
.input--text:focus {
  border-color: #51a7e8;
  /* box 그림자 다중으로 넣기 */
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.075), 
              0 0 5px rgba(81, 167, 232, 0.5);  
}
/* 가상 요소 선택자 */
/* Vendor Prefix (브라우저 업체별 접두사. 표준이 아닌 브라우저에서 사용될 수 있는 기능을 제공) */
/* 크롬은 webkit 이라는 접두어 사용 */
.input--text::-webkit-input-placeholder {color: #cacaca;}
.input--text::-ms-input-placeholder {color: #cacaca;}
.input--text::-moz-input-placeholder {color: #cacaca;}

/* FLOAT CLEARFIX */
.clearfix::after {
  content: "";
  clear: both;
  display: block;
}
.float--left {
  float: left;
}
.float--right {
  float: right;
}

/* SUMMARY */
.summary {

}
.summary__title {
  font-size: 38px;
  font-weight: 300; /* 얇게 */
  line-height: 1.25; /* 행간 */
  margin-bottom: 18px;
}
.summary__description {
  font-size: 26px;
  font-weight: 300;
  color: #767676;
  line-height: 1.5;
}

/* SECTION & INNER 정의 */
.section {
  position: relative;
}
.section .inner {
  max-width: 980px;
  margin: 0 auto; /* 가운데 정렬. width 가 정의 되어 있어야 한다! 위아래 0, 좌우 auto */
  box-sizing: border-box; /* padding 이나 boarder 가 들어갔을 때 요소가 확 커지는 것을 방지해주는 것 */
  position: relative; /* absolute 경우 부모 요소에 position 이 있는지 확인 해야 하는데, inner 에서 멈추게 하기 위해 relative 를 사용*/
}

/* HEADER */
header {
  border-bottom: 1px solid rgba(0,0,0,.075);
  box-shadow: 0 0 5px rgba(0,0,0,.075);
  background: #fff;
}
header .inner {
  height: 78px;
}
header .menu-group {
  display: flex; /* 자식 요소 수평 정렬하기 */
  align-items: center; /* display:flex 속성이 있는 경우 수직 정렬하는 방법 */
  height: 100%; /* 부모 크기 만큼 */
}
/* a 태그를 감싸는 요소 */
header .logo {
  margin-right: 10px;
}
/* 실질적으로 클릭되는 것은 a 요소, 로고 이미지는 a 태그 범위 내에 존재해야 한다 */
header .logo a {
  /* 로그 이미지를 이미지 태그를 사용하지 않고, css 의 background 로 정의 */
  background: url("../img/logo.svg");
  /* a 태그는 인라인 요소. 인라인 요소는 범위를 가질 수 없다. 그래서 범위 안의 이미지를 표현할 수 없다 */
  width: 32px;
  height: 32px;
  display: block;
  text-indent: -9999px; /* 들여쓰기 속성. 화면에는 텍스트가 사라졌지만 html 구조적으로 남아있어서 img alt 역할을 수행 */
}
/* 가상 클래스 선택자 */
header .logo a:hover {
  background: url("../img/logo_on.svg");
}
header .main-menu {
  display: flex; /* 자식 요소 수평 정렬하기 */
}
header .main-menu li a {
  /* 인라인 요소인 a 태그는 패딩의 위아래 값을 제대로 사용할 수 없어 블럭 요소로 바꾼다. */
  display: block;
  padding: 10px; /* 클릭 가능한 범위 늘리기. margin 은 이런 기능이 안 된다. */
  color: #3c4146;
}
header .main-menu li a:hover {
  color: #4078c0;
}

header .sign-group {
  display: flex;
  align-items: center;
  height: 100%;
}
header .btn-group {
  order: 2; /* 숫자가 클수록 우선순위 떨어짐 */
  display: flex; /* 버튼을 수평으로 만든다. 공백 없애기*/
}
header .btn-group .sign-in{
  margin-right: 4px;
}
#search-form {
  order: 1;
  margin-right: 12px;
}
#search {
  width: 160px;
  font-size: 14px;
}
/* submit 버튼에 클래스를 정의하기보다 선택자를 활용. search 의 다음 형제 요소를 정의 */
/* + : 형제 선택자 */
/* []: 속성 선택자 */
#search + [type="submit"]{
  display: none;
}
header .sub-menu {
  display: flex;
  margin-right: 10px;
}
header .sub-menu li a {
  padding: 8px;
  display: block;
  font-size: 13px;
  color: #3c4146;
}
header .sub-menu li a:hover {
  color: #4078c0;
}

/* VISUAL */
.section--visual {
  background-image: url("../img/bg.jpg");
  background-repeat: no-repeat;
  background-position: bottom left; /* 위치: 왼쪽 하단으로 설정. default: left top*/
  background-size: cover; /* 배경이 들어가는 요소 크기가 변하더라도 늘리거나 줄여서 다 덮도록 하는 설정 */
}
/* 배경을 어둡게 하는 방법 */
.section--visual::before {
  content: "";
  /* 모든 방향에 0으로 설정하고, position: absolue(부모 요소를 기준을 배치)로 하면 -> 가로 100%, 세로 100% 와 같은 효과 */
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, .3);
}
.section--visual .inner {
  padding: 160px 0; /* 위아래 여백 160px, 좌우 여백 0*/
  display: flex; /* 자식 요소 수평으로 만들기 이것만 하면 좌측 텍스트 영역이 커서 우측 영역이 쪼그라든다. .section--visual .summary 정의*/
}
.section--visual .summary {
  /* 전체 영역을 가변하는 영역으로 summary 가 차지하도록 만들어 주려고 */
  flex: 1; /* flex-grow: 1; flex-basis: 0; 와 같은 설정 */
  margin-right: 90px;
}
.section--visual .summary__title {
  color: #fff;
  font-size: 54px;
  /* 글자 그림자 효과, x=0,y=1px,blur=1px */
  text-shadow: 0 1px 1px rgba(0,0,0,.25), 
               0 1px 25px rgba(0,0,0,.75); 
}
.section--visual .summary__description {
  color: #fff;
  text-shadow: 0 1px 1px rgba(0,0,0,.25), 
               0 1px 25px rgba(0,0,0,.75); 
}
/* 자식 요소를 한 번에 제어 가능한 구조 */
#sign-form {
  width: 340px;
  margin-top: 10px;
}
#sign-form li {
  margin-bottom: 17px;
}
/* 마지막 li 태그는 margin 이 불필요 */
#sign-form li:last-child {
  margin-bottom: 0;
}
#sign-form .input--text{
  width: 100%;
  height: 40px;
}
#sign-form .caption {
  font-size: 12px;
  margin-top: 5px;
  color: rgba(255, 255, 255, .6);
  line-height: 1.5;
  text-align: center;
}
/* form 태그내에 submit 버튼은 하나이다. 속성 선택자를 통해서 정의하자 */
#sign-form [type="submit"] {
  width: 100%;
  height: 62px;
  padding: 0 25px; /* 위아래=0, 좌우=25px*/
  font-size: 20px;
  /* text-align: center 로는 중앙정렬 안 됨 -> btn의 display: inline-flex 라서, */
  /* flexible box 에서 자식요소에서 
    수평 정렬 하려면, justify content 속성을 써야한다 
    수직 정렬 하려면, align-items 속성 사용 */
  justify-content: center; 
}

/* FEATURE */
.section--feature {
  background: #f5f5f5;
  padding-top: 66px;
}
.section--feature .summary {
  max-width: 820px;
  margin: 0 auto; /* 가운데 정렬 */
  text-align: center;
}
.section--feature .video {
  max-width: 650px;
  margin: 50px auto; /* 위아래 여백 & 중앙 정렬 */
}
.section--feature .video-ratio {
  height: 0;
  padding-top: 56.25%;
  position: relative;
}
.section--feature .video .video-ratio iframe{
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.section--feature .tiles {
  border-top: 1px solid #e5e5e5;
  border-bottom: 1px solid #e5e5e5;
}
.section--feature .tiles .inner {
  /* 나머지 설정은 .section .inner 의 것을 따른다 */
  max-width: 1200px;
}
.section--feature .tiles ul {
  /* 아이템을 수평 정렬하는 다양한 방법이 있지만, 
    모던한 방식인 grid 를 사용해 볼 것이다.
    repeat() 를 사용하면 손쉽게 컬럼을 만들 수 있다.
    1fr: 각각의 컬럼은 1:1 의 비율로 출력
  */
  /* display: grid;
  grid-template-columns: repeat(4, 1fr); */  
}
.section--feature .tiles li {
  padding: 34px 24px; /* 위 34px, 좌우 24px*/
  text-align: center;
  line-height: 1.5;
  /* 아이템 사이 선 표시 */
  border-right: 1px solid #e5e5e5;
  box-sizing: border-box; /* 안커지게 하려고*/
  /* grid 를 지원하지 않는 경우 구현 방법 */
  float: left; /* 부모요소에 cliearfix 가 있는 지 필히 확인! */
  /* 4개의 컬럼을 만들거니까 25%씩 차지, 
    %를 사용할 때 주의점은 padding 같은 것으로 인해 사이즈가 커져 %가 적용이 잘 안될 수 있다.
    box-sizing를 필히 정의할 것 */
  width: 25%; 
}
.section--feature .tiles li:last-child {
  /* 마지막 item 은 border 가 없다 */
  border-right: none;
}
.section--feature .tiles li img {
  max-width: 100%;
  padding: 14px 10% 24px; /* 위 14px, 좌우 10%, 아래 24px */
  box-sizing: border-box;
}
.section--feature .tiles li h3{
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 10px;
}
.section--feature .tiles li p {
  font-size: 14px;
  color: #767676;
}

/* WHERE IS */
.section--where-is {

}
.section--where-is .inner {
  padding-top: 80px;
}
#map {
  width: 100%;
  height: 400px;
  margin-top: 40px;
  border: 1px solid rgba(0, 0, 0, .2);
  border-bottom: none;
  box-shadow: 0 0 20px rgba(0, 0, 0, .2);
  box-sizing: border-box;
}

/* PRICING CARD */
.section--pricing {
  background: linear-gradient(#f5f5f5, #fff);
}
.section--pricing .inner {
  padding: 80px 0; /* 위아래 80px, 좌우 0*/
}
.section--pricing .card {
  display: flex;
  border: 1px solid #e5e5e5;
  border-radius: 6px;
  box-sizing: border-box;
}
.section--pricing .card .cell {
  padding: 24px;
  /* 컨텐츠 중앙 배치 */
  display: flex;
  justify-content: center; /* 수평 중앙 정렬 */
  align-items: center; /* 수직 중앙 정렬 */
}
.section--pricing .card .cell1 btn {
  height: 50px;
  font-size: 16px;
}
.section--pricing .card .cell2 {
  font-size: 22px;
  font-weight: 300;
  line-height: 1.5;
  flex: 1; /* 유연하게 늘고 줄수 있게하는 설정 */
  border-left: 1px solid #e5e5e5;
}

/* FOOTER */
/* footer 태그 */
footer {

}
footer .inner {
  padding: 50px 0;
  border-top: 1px solid #eee;
}
footer .site-links {
  display: flex; /* 수평 */
}
footer .site-links li {
  font-size: 12px;
  margin-right: 10px;
  color: #767676;
}
footer .site-links li a {
  color: #4078c0;
}
footer .site-links li a:hover{
  text-decoration: underline;
}
footer .logo {
  /* 부모 영역 안에서 완벽하게 가운데 배치시키는 방법 */
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
  width: 24px;
  height: 24px;
}
/* logo 에 마우스 over 되면 svg 색상을 파랑색으로 채우겠다 */
footer .logo:hover svg {
  fill: #4078c0;
}